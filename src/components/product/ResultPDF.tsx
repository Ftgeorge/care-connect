import { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';

const styles = StyleSheet.create({
  page: {
    padding: 30,
    backgroundColor: '#ffffff',
  },
  header: {
    marginBottom: 20,
    borderBottom: '1 solid #e5e7eb',
    paddingBottom: 10,
  },
  title: {
    fontSize: 24,
    color: '#D98586',
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 14,
    color: '#636e72',
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 16,
    color: '#2D3436',
    marginBottom: 10,
    fontWeight: 'bold',
  },
  symptomTag: {
    backgroundColor: '#f3f4f6',
    padding: '5 10',
    borderRadius: 15,
    marginRight: 5,
    marginBottom: 5,
    fontSize: 12,
  },
  condition: {
    marginBottom: 15,
    padding: 10,
    border: '1 solid #e5e7eb',
    borderRadius: 5,
  },
  conditionTitle: {
    fontSize: 14,
    color: '#2D3436',
    marginBottom: 5,
    fontWeight: 'bold',
  },
  conditionDescription: {
    fontSize: 12,
    color: '#636e72',
    marginBottom: 5,
  },
  recommendation: {
    fontSize: 12,
    color: '#636e72',
    marginBottom: 3,
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    textAlign: 'center',
    color: '#636e72',
    fontSize: 10,
  },
});

interface ResultPDFProps {
  result: {
    date: Date;
    symptoms: string[];
    conditions: Array<{
      name: string;
      probability: number;
      description: string;
      recommendations: string[];
    }>;
    severity: string;
    recommendations: string[];
  };
}

export default function ResultPDF({ result }: ResultPDFProps) {
  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.title}>Health Analysis Report</Text>
          <Text style={styles.subtitle}>
            Generated on {result.date.toLocaleDateString()}
          </Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Reported Symptoms</Text>
          <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>
            {result.symptoms.map((symptom, index) => (
              <Text key={index} style={styles.symptomTag}>
                {symptom}
              </Text>
            ))}
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Possible Conditions</Text>
          {result.conditions.map((condition, index) => (
            <View key={index} style={styles.condition}>
              <Text style={styles.conditionTitle}>
                {condition.name} ({condition.probability}% probability)
              </Text>
              <Text style={styles.conditionDescription}>
                {condition.description}
              </Text>
              <Text style={styles.sectionTitle}>Recommendations:</Text>
              {condition.recommendations.map((recommendation, idx) => (
                <Text key={idx} style={styles.recommendation}>
                  • {recommendation}
                </Text>
              ))}
            </View>
          ))}
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>General Recommendations</Text>
          {result.recommendations.map((recommendation, index) => (
            <Text key={index} style={styles.recommendation}>
              • {recommendation}
            </Text>
          ))}
        </View>

        <Text style={styles.footer}>
          This report is generated by CareConnect's AI-powered health analysis
          system. Please consult with a healthcare professional for medical
          advice.
        </Text>
      </Page>
    </Document>
  );
} 